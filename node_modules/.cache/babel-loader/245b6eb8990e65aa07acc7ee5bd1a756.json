{"ast":null,"code":"var _jsxFileName = \"/Users/ivandimitrov/Desktop/Portfolio-Website/client/src/Containers/Terminal/CommandParser.js\";\nimport React from 'react';\nimport help_descriptions from '../../Resources/constants/help_descriptions.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allCommands = [{\n  command: 'clear',\n  arguments: 1,\n  runFunction: allPackages => {\n    return 'clear';\n  }\n}, {\n  command: 'help',\n  arguments: 1,\n  runFunction: allPackages => helpArray()\n}, {\n  command: 'ls',\n  arguments: 1,\n  runFunction: allPackages => handleLS(allPackages)\n}, {\n  command: 'cd',\n  arguments: 2,\n  runFunction: allPackages => handleCD(allPackages)\n}, {\n  command: 'mkdir',\n  arguments: 2,\n  runFunction: allPackages => allPackages.os.mkdir(allPackages)\n}, {\n  command: 'rm',\n  arguments: 2,\n  runFunction: allPackages => allPackages.os.rm(allPackages)\n}, {\n  command: 'touch',\n  arguments: 2,\n  runFunction: allPackages => allPackages.os.touch(allPackages)\n}, {\n  command: 'open',\n  arguments: 2,\n  runFunction: allPackages => handleOPEN(allPackages)\n}, {\n  command: 'su',\n  arguments: 2,\n  runFunction: allPackages => handleSU(allPackages)\n}, {\n  command: 'reset',\n  arguments: 1,\n  runFunction: allPackages => allPackages.os.reset()\n}];\n\nconst ParseCommand = (command, allPackages) => {\n  allPackages = { ...allPackages,\n    commandSelector: command.split(\" \")\n  };\n  let result = [];\n  let foundCommand = false;\n  allCommands.forEach(commandObj => {\n    if (commandObj.command === allPackages.commandSelector[0]) {\n      foundCommand = true;\n\n      if (allPackages.commandSelector.length === commandObj.arguments) {\n        result = commandObj.runFunction(allPackages);\n        return result;\n      } else {\n        result = rejectCommand(allPackages.commandSelector.length, commandObj.arguments);\n        return result;\n      }\n    }\n  });\n  if (!foundCommand) result = [/*#__PURE__*/_jsxDEV(\"p\", {\n    children: [command, \" is not a recognized command\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 19\n  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Type \\\"help\\\" for list of commands\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 99\n    }, this), \"\\u2800\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 64\n  }, this)];\n  return result;\n};\n\n_c = ParseCommand;\n\nconst handleLS = allPackages => {\n  const {\n    os\n  } = allPackages;\n  let result = [];\n  let respond = os.ls();\n  respond.map(item => {\n    if (item.type === \"folder\") return result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"indented I\",\n      children: [item.name, \"/\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 32\n    }, this));else return result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"indented\",\n      children: item.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 32\n    }, this));\n  });\n  result.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 17\n  }, this));\n  return result;\n};\n\nconst handleCD = allPackages => {\n  const {\n    os,\n    commandSelector,\n    setPath,\n    path\n  } = allPackages;\n  let result = [];\n  let newPath = os.cd(commandSelector[1], path);\n  if (newPath === \"\") result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Can't open \", commandSelector[1]]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 21\n  }, this));else setPath(newPath);\n  return result;\n};\n\nconst handleOPEN = allPackages => {\n  const {\n    os,\n    commandSelector,\n    path\n  } = allPackages;\n  let result = [];\n  let owners = os.open(commandSelector[1], path);\n  if (!owners) result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [commandSelector[1], \" not found\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 54\n    }, this), \"\\u2800\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 21\n  }, this));else if (owners.length === 0 || owners.includes(os.user)) result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Opening \", commandSelector[1], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 52\n    }, this), \"\\u2800\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 21\n  }, this));else result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Permission denied owners: \", owners.map(owner => owner), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 78\n    }, this), \"\\u2800\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 21\n  }, this));\n  return result;\n};\n\nconst handleSU = allPackages => {\n  const {\n    os,\n    path,\n    setPath,\n    commandSelector\n  } = allPackages;\n  let result = [];\n  os.terminalString = path;\n  os.su(commandSelector[1]);\n  result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      className: \"I\",\n      children: [\"Password for \", commandSelector[1], \":\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 20\n    }, this), \"*******\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 17\n  }, this));\n  result.push( /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"I\",\n    children: [\"Logged in as \", commandSelector[1], \"!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 68\n    }, this), \"\\u2800\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 17\n  }, this));\n  setPath(os.terminalString);\n  return result;\n};\n\nconst helpArray = () => {\n  let result = help_descriptions.map(commandObj => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"indented\",\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        className: \"I\",\n        children: [\"[\", commandObj.command, \"] \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this), \": \", commandObj.description]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 16\n    }, this);\n  });\n  result.push( /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 17\n  }, this));\n  return result;\n};\n\nconst rejectCommand = (received, expected) => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Incorrect Number of arguments. Received: \", received, \", expected: \", expected, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 88\n    }, this), \"\\u2800\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 12\n  }, this);\n};\n\nexport default ParseCommand;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParseCommand\");","map":{"version":3,"sources":["/Users/ivandimitrov/Desktop/Portfolio-Website/client/src/Containers/Terminal/CommandParser.js"],"names":["React","help_descriptions","allCommands","command","arguments","runFunction","allPackages","helpArray","handleLS","handleCD","os","mkdir","rm","touch","handleOPEN","handleSU","reset","ParseCommand","commandSelector","split","result","foundCommand","forEach","commandObj","length","rejectCommand","respond","ls","map","item","type","push","name","setPath","path","newPath","cd","owners","open","includes","user","owner","terminalString","su","description","received","expected"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport help_descriptions from '../../Resources/constants/help_descriptions.json'\r\n\r\nlet allCommands = [\r\n    {\r\n        command:'clear',\r\n        arguments:1,\r\n        runFunction:(allPackages)=>{return 'clear'}\r\n    },\r\n    {\r\n        command:'help',\r\n        arguments:1,\r\n        runFunction:(allPackages)=>helpArray()\r\n    },\r\n    {\r\n        command:'ls',\r\n        arguments:1,\r\n        runFunction:(allPackages)=>handleLS(allPackages)\r\n    },\r\n    {\r\n        command:'cd',\r\n        arguments:2,\r\n        runFunction:(allPackages)=>handleCD(allPackages)\r\n    },\r\n    {\r\n        command:'mkdir',\r\n        arguments:2,\r\n        runFunction:(allPackages)=>allPackages.os.mkdir(allPackages)\r\n    },\r\n    {\r\n        command:'rm',\r\n        arguments:2,\r\n        runFunction:(allPackages)=>allPackages.os.rm(allPackages)\r\n    },\r\n    {\r\n        command:'touch',\r\n        arguments:2,\r\n        runFunction:(allPackages)=>allPackages.os.touch(allPackages)\r\n    },\r\n    {\r\n        command:'open',\r\n        arguments:2,\r\n        runFunction:(allPackages)=>handleOPEN(allPackages)\r\n    },\r\n    {\r\n        command:'su',\r\n        arguments:2,\r\n        runFunction:(allPackages)=>handleSU(allPackages)\r\n    },\r\n    {\r\n        command:'reset',\r\n        arguments:1,\r\n        runFunction:(allPackages)=>allPackages.os.reset()\r\n    }\r\n]\r\n\r\nconst ParseCommand = (command,allPackages) =>{\r\n    allPackages={...allPackages,commandSelector:command.split(\" \"),}\r\n    let result = [];\r\n    \r\n    let foundCommand = false;\r\n    allCommands.forEach((commandObj)=>{\r\n        if(commandObj.command === allPackages.commandSelector[0]){\r\n            foundCommand = true;\r\n            if(allPackages.commandSelector.length === commandObj.arguments){\r\n                result = commandObj.runFunction(allPackages);\r\n                return result\r\n            }\r\n            else{\r\n                result = rejectCommand(allPackages.commandSelector.length,commandObj.arguments)\r\n                return result;\r\n            }\r\n        }\r\n    })\r\n\r\n    if(!foundCommand)\r\n        result = [<p>{command} is not a recognized command</p>,<p>Type \"help\" for list of commands<br/>⠀</p>]\r\n   \r\n    return result\r\n}\r\n\r\nconst handleLS = (allPackages) =>{\r\n    const { os } = allPackages;\r\n    let result = []\r\n    let respond = os.ls();\r\n    respond.map((item)=>{\r\n        if(item.type === \"folder\")\r\n            return result.push(<p  className=\"indented I\">{item.name}/</p>)\r\n        else\r\n            return result.push(<p  className=\"indented\">{item.name}</p>)\r\n    })\r\n    result.push(<br/>)\r\n    return result;\r\n}\r\n\r\nconst handleCD = (allPackages) =>{\r\n    const { os,commandSelector,setPath,path }  = allPackages;\r\n    let result = []\r\n    let newPath = os.cd(commandSelector[1],path);\r\n    if(newPath === \"\")\r\n        result.push(<p>Can't open {commandSelector[1]}</p>)\r\n    \r\n    else\r\n        setPath(newPath)\r\n    \r\n    return result;\r\n}\r\n\r\nconst handleOPEN = (allPackages) =>{\r\n    const { os, commandSelector, path } = allPackages;\r\n    let result = [];\r\n    let owners = os.open(commandSelector[1],path)\r\n    if(!owners)\r\n        result.push(<p>{commandSelector[1]} not found<br/>⠀</p>)\r\n    else if(owners.length === 0 || owners.includes(os.user))\r\n        result.push(<p>Opening {commandSelector[1]}<br/>⠀</p>)\r\n    else\r\n        result.push(<p>Permission denied owners: {owners.map((owner)=>owner)}<br/>⠀</p>)\r\n\r\n    return result;\r\n}\r\n\r\nconst handleSU = (allPackages) =>{\r\n    const{ os, path, setPath, commandSelector} = allPackages\r\n    let result = [];\r\n    os.terminalString = path;\r\n    os.su(commandSelector[1])\r\n    \r\n    result.push(<p><b className='I'>Password for {commandSelector[1]}:</b>*******</p>)\r\n    result.push(<p className='I'>Logged in as {commandSelector[1]}!<br/>⠀</p>)\r\n    setPath(os.terminalString)\r\n\r\n    return result;\r\n}\r\n\r\nconst helpArray = () =>{\r\n    let result = help_descriptions.map((commandObj)=>{\r\n        return <p className=\"indented\">\r\n                    <b className='I'>[{commandObj.command}] </b>\r\n                    : {commandObj.description}\r\n                </p>\r\n    })\r\n    result.push(<br/>)\r\n    return result;\r\n\r\n}\r\n\r\nconst rejectCommand = (received,expected) =>{\r\n    return <p>Incorrect Number of arguments. Received: {received}, expected: {expected}<br/>⠀</p>;  \r\n}\r\n\r\nexport default ParseCommand"]},"metadata":{},"sourceType":"module"}