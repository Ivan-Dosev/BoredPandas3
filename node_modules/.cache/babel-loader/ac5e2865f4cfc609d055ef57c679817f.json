{"ast":null,"code":"import api_key from './api_key.json';\n\nconst packageAll = () => {\n  let headers = new Headers();\n  const token = api_key.key;\n  const all_repos_url = 'https://api.github.com/users/Bored-Pandas/repos';\n  headers.set('Authorization', \"token \" + token);\n  const allPackages = {\n    headers: headers,\n    token: token,\n    url: all_repos_url\n  };\n  return allPackages;\n};\n\nconst use_private_key = allPackages => {\n  allPackages.headers = new Headers();\n  allPackages.headers.set('Authorization', \"token \" + allPackages.token);\n};\n\nconst use_public_key = allPackages => {\n  allPackages.headers = new Headers();\n};\n\nconst sleep = async duration => {\n  await new Promise(r => setTimeout(r, duration));\n};\n\nconst send_api_call = async allPackages => {\n  let response = await fetch(allPackages.url, {\n    method: 'GET',\n    headers: allPackages.headers\n  });\n\n  if (response.ok) {\n    return response.json();\n  } else {\n    use_public_key(allPackages);\n    await sleep(1000);\n    return send_api_call(allPackages);\n  }\n};\n\nconst github_api = async () => {\n  let allPackages = packageAll();\n  let all_repositories = await send_api_call(allPackages);\n  let result_data = [];\n\n  for (let i = 0; i < all_repositories.length; i++) {\n    let indiv_repo = all_repositories[i];\n    use_private_key(allPackages);\n    allPackages.url = indiv_repo.languages_url;\n    const languages_json = await send_api_call(allPackages);\n    let languages_str = \"\";\n\n    for (let [key] of Object.entries(languages_json)) languages_str += \" \" + key;\n\n    result_data.push({\n      name: indiv_repo.name,\n      link: indiv_repo.html_url,\n      description: indiv_repo.description,\n      languages: languages_str,\n      size: indiv_repo.size\n    });\n  }\n\n  result_data.sort((repo1, repo2) => {\n    return repo2.size - repo1.size;\n  });\n  return {\n    repos: result_data\n  };\n};\n\nexport default github_api;","map":{"version":3,"sources":["/Users/ivandimitrov/Desktop/Portfolio-Website/client/src/Resources/util/github_api.js"],"names":["api_key","packageAll","headers","Headers","token","key","all_repos_url","set","allPackages","url","use_private_key","use_public_key","sleep","duration","Promise","r","setTimeout","send_api_call","response","fetch","method","ok","json","github_api","all_repositories","result_data","i","length","indiv_repo","languages_url","languages_json","languages_str","Object","entries","push","name","link","html_url","description","languages","size","sort","repo1","repo2","repos"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,UAAU,GAAG,MAAK;AACtB,MAAIC,OAAO,GAAG,IAAIC,OAAJ,EAAd;AACA,QAAMC,KAAK,GAAGJ,OAAO,CAACK,GAAtB;AACA,QAAMC,aAAa,GAAG,iDAAtB;AACAJ,EAAAA,OAAO,CAACK,GAAR,CAAY,eAAZ,EAA6B,WAAWH,KAAxC;AAEA,QAAMI,WAAW,GAAG;AAClBN,IAAAA,OAAO,EAACA,OADU;AACFE,IAAAA,KAAK,EAACA,KADJ;AACUK,IAAAA,GAAG,EAACH;AADd,GAApB;AAIA,SAAOE,WAAP;AACD,CAXD;;AAaA,MAAME,eAAe,GAAIF,WAAD,IAAgB;AACtCA,EAAAA,WAAW,CAACN,OAAZ,GAAsB,IAAIC,OAAJ,EAAtB;AACAK,EAAAA,WAAW,CAACN,OAAZ,CAAoBK,GAApB,CAAwB,eAAxB,EAAyC,WAAWC,WAAW,CAACJ,KAAhE;AACD,CAHD;;AAKA,MAAMO,cAAc,GAAIH,WAAD,IAAgB;AACrCA,EAAAA,WAAW,CAACN,OAAZ,GAAsB,IAAIC,OAAJ,EAAtB;AACD,CAFD;;AAIA,MAAMS,KAAK,GAAG,MAAMC,QAAN,IAAkB;AAC9B,QAAM,IAAIC,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAIF,QAAJ,CAA3B,CAAN;AACD,CAFD;;AAIA,MAAMI,aAAa,GAAG,MAAMT,WAAN,IAAsB;AAC1C,MAAIU,QAAQ,GAAG,MAAMC,KAAK,CAACX,WAAW,CAACC,GAAb,EAAiB;AAACW,IAAAA,MAAM,EAAE,KAAT;AAAgBlB,IAAAA,OAAO,EAACM,WAAW,CAACN;AAApC,GAAjB,CAA1B;;AAEA,MAAGgB,QAAQ,CAACG,EAAZ,EAAe;AACb,WAAOH,QAAQ,CAACI,IAAT,EAAP;AACD,GAFD,MAGI;AACFX,IAAAA,cAAc,CAACH,WAAD,CAAd;AACA,UAAMI,KAAK,CAAC,IAAD,CAAX;AACA,WAAOK,aAAa,CAACT,WAAD,CAApB;AACD;AACF,CAXD;;AAaA,MAAMe,UAAU,GAAG,YAAY;AAC7B,MAAIf,WAAW,GAAGP,UAAU,EAA5B;AACA,MAAIuB,gBAAgB,GAAG,MAAMP,aAAa,CAACT,WAAD,CAA1C;AAGA,MAAIiB,WAAW,GAAG,EAAlB;;AACA,OAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,gBAAgB,CAACG,MAApC,EAA4CD,CAAC,EAA7C,EAAgD;AAC9C,QAAIE,UAAU,GAAGJ,gBAAgB,CAACE,CAAD,CAAjC;AAEAhB,IAAAA,eAAe,CAACF,WAAD,CAAf;AACAA,IAAAA,WAAW,CAACC,GAAZ,GAAkBmB,UAAU,CAACC,aAA7B;AACA,UAAMC,cAAc,GAAG,MAAMb,aAAa,CAACT,WAAD,CAA1C;AAEA,QAAIuB,aAAa,GAAG,EAApB;;AACA,SAAI,IAAI,CAAC1B,GAAD,CAAR,IAAiB2B,MAAM,CAACC,OAAP,CAAeH,cAAf,CAAjB,EACEC,aAAa,IAAI,MAAM1B,GAAvB;;AAEFoB,IAAAA,WAAW,CAACS,IAAZ,CACA;AACEC,MAAAA,IAAI,EAACP,UAAU,CAACO,IADlB;AAEEC,MAAAA,IAAI,EAACR,UAAU,CAACS,QAFlB;AAGEC,MAAAA,WAAW,EAACV,UAAU,CAACU,WAHzB;AAIEC,MAAAA,SAAS,EAACR,aAJZ;AAKES,MAAAA,IAAI,EAACZ,UAAU,CAACY;AALlB,KADA;AAQD;;AAGDf,EAAAA,WAAW,CAACgB,IAAZ,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAgB;AAAC,WAAQA,KAAK,CAACH,IAAN,GAAaE,KAAK,CAACF,IAA3B;AAAiC,GAAnE;AAEA,SAAO;AAACI,IAAAA,KAAK,EAACnB;AAAP,GAAP;AACD,CA/BD;;AAiCE,eAAeF,UAAf","sourcesContent":["import api_key from './api_key.json'\r\n\r\nconst packageAll = () =>{\r\n  let headers = new Headers();\r\n  const token = api_key.key\r\n  const all_repos_url = 'https://api.github.com/users/Bored-Pandas/repos'\r\n  headers.set('Authorization', \"token \" + token);\r\n\r\n  const allPackages = {\r\n    headers:headers,token:token,url:all_repos_url\r\n  }\r\n\r\n  return allPackages;\r\n}\r\n\r\nconst use_private_key = (allPackages) =>{\r\n  allPackages.headers = new Headers()\r\n  allPackages.headers.set('Authorization', \"token \" + allPackages.token);\r\n}\r\n\r\nconst use_public_key = (allPackages) =>{\r\n  allPackages.headers = new Headers();\r\n}\r\n\r\nconst sleep = async(duration) =>{\r\n  await new Promise(r => setTimeout(r, duration));\r\n}\r\n\r\nconst send_api_call = async(allPackages) => {\r\n  let response = await fetch(allPackages.url,{method: 'GET', headers:allPackages.headers});\r\n\r\n  if(response.ok){\r\n    return response.json();\r\n  }\r\n  else{\r\n    use_public_key(allPackages);\r\n    await sleep(1000)\r\n    return send_api_call(allPackages)\r\n  }\r\n}\r\n\r\nconst github_api = async () => {\r\n  let allPackages = packageAll();\r\n  let all_repositories = await send_api_call(allPackages)\r\n      \r\n\r\n  let result_data = []\r\n  for(let i = 0; i < all_repositories.length; i++){\r\n    let indiv_repo = all_repositories[i]\r\n\r\n    use_private_key(allPackages);\r\n    allPackages.url = indiv_repo.languages_url\r\n    const languages_json = await send_api_call(allPackages)\r\n\r\n    let languages_str = \"\";\r\n    for(let [key] of Object.entries(languages_json)) \r\n      languages_str += \" \" + key\r\n\r\n    result_data.push(\r\n    {\r\n      name:indiv_repo.name,\r\n      link:indiv_repo.html_url,\r\n      description:indiv_repo.description,\r\n      languages:languages_str,\r\n      size:indiv_repo.size\r\n    });\r\n  }\r\n\r\n\r\n  result_data.sort((repo1, repo2)=>{return( repo2.size - repo1.size)});\r\n\r\n  return {repos:result_data};\r\n}\r\n\r\n  export default github_api;"]},"metadata":{},"sourceType":"module"}